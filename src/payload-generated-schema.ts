/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  serial,
  varchar,
  timestamp,
  numeric,
  boolean,
  integer,
  jsonb,
  pgEnum,
} from '@payloadcms/db-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-postgres/drizzle'
export const enum__locales = pgEnum('enum__locales', ['en', 'ar'])
export const enum_users_civility = pgEnum('enum_users_civility', ['mx', 'mr', 'mrs', 'ms'])
export const enum_users_country = pgEnum('enum_users_country', [
  'AF',
  'AX',
  'AL',
  'DZ',
  'AS',
  'AD',
  'AO',
  'AI',
  'AQ',
  'AG',
  'AR',
  'AM',
  'AW',
  'AU',
  'AT',
  'AZ',
  'BS',
  'BH',
  'BD',
  'BB',
  'BY',
  'BE',
  'BZ',
  'BJ',
  'BM',
  'BT',
  'BO',
  'BA',
  'BW',
  'BV',
  'BR',
  'IO',
  'BN',
  'BG',
  'BF',
  'BI',
  'KH',
  'CM',
  'CA',
  'CV',
  'KY',
  'CF',
  'TD',
  'CL',
  'CN',
  'CX',
  'CC',
  'CO',
  'KM',
  'CG',
  'CD',
  'CK',
  'CR',
  'CI',
  'HR',
  'CU',
  'CY',
  'CZ',
  'DK',
  'DJ',
  'DM',
  'DO',
  'EC',
  'EG',
  'SV',
  'GQ',
  'ER',
  'EE',
  'ET',
  'FK',
  'FO',
  'FJ',
  'FI',
  'FR',
  'GF',
  'PF',
  'TF',
  'GA',
  'GM',
  'GE',
  'DE',
  'GH',
  'GI',
  'GR',
  'GL',
  'GD',
  'GP',
  'GU',
  'GT',
  'GG',
  'GN',
  'GW',
  'GY',
  'HT',
  'HM',
  'VA',
  'HN',
  'HK',
  'HU',
  'IS',
  'IN',
  'ID',
  'IR',
  'IQ',
  'IE',
  'IM',
  'IL',
  'IT',
  'JM',
  'JP',
  'JE',
  'JO',
  'KZ',
  'KE',
  'KI',
  'KP',
  'KR',
  'KW',
  'KG',
  'LA',
  'LV',
  'LB',
  'LS',
  'LR',
  'LY',
  'LI',
  'LT',
  'LU',
  'MO',
  'MK',
  'MG',
  'MW',
  'MY',
  'MV',
  'ML',
  'MT',
  'MH',
  'MQ',
  'MR',
  'MU',
  'YT',
  'MX',
  'FM',
  'MD',
  'MC',
  'MN',
  'MS',
  'MA',
  'MZ',
  'MM',
  'NA',
  'NR',
  'NP',
  'NL',
  'AN',
  'NC',
  'NZ',
  'NI',
  'NE',
  'NG',
  'NU',
  'NF',
  'MP',
  'NO',
  'OM',
  'PK',
  'PW',
  'PS',
  'PA',
  'PG',
  'PY',
  'PE',
  'PH',
  'PN',
  'PL',
  'PT',
  'PR',
  'QA',
  'RE',
  'RO',
  'RU',
  'RW',
  'SH',
  'KN',
  'LC',
  'PM',
  'VC',
  'WS',
  'SM',
  'ST',
  'SA',
  'SN',
  'CS',
  'SC',
  'SL',
  'SG',
  'SK',
  'SI',
  'SB',
  'SO',
  'ZA',
  'GS',
  'ES',
  'LK',
  'SD',
  'SR',
  'SJ',
  'SZ',
  'SE',
  'CH',
  'SY',
  'TW',
  'TJ',
  'TZ',
  'TH',
  'TL',
  'TG',
  'TK',
  'TO',
  'TT',
  'TN',
  'TR',
  'TM',
  'TC',
  'TV',
  'UG',
  'UA',
  'AE',
  'GB',
  'US',
  'UM',
  'UY',
  'UZ',
  'VU',
  'VE',
  'VN',
  'VG',
  'VI',
  'WF',
  'EH',
  'YE',
  'ZM',
  'ZW',
])
export const enum_users_role = pgEnum('enum_users_role', ['admin', 'user'])
export const enum_jewelleries_product_type = pgEnum('enum_jewelleries_product_type', [
  'Earring',
  'Bracelet',
  'Necklace',
])

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    civility: enum_users_civility('civility').notNull(),
    firstName: varchar('first_name').notNull(),
    lastName: varchar('last_name').notNull(),
    country: enum_users_country('country').notNull(),
    role: enum_users_role('role').notNull().default('user'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
    sizes_thumbnail_url: varchar('sizes_thumbnail_url'),
    sizes_thumbnail_width: numeric('sizes_thumbnail_width'),
    sizes_thumbnail_height: numeric('sizes_thumbnail_height'),
    sizes_thumbnail_mimeType: varchar('sizes_thumbnail_mime_type'),
    sizes_thumbnail_filesize: numeric('sizes_thumbnail_filesize'),
    sizes_thumbnail_filename: varchar('sizes_thumbnail_filename'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
    media_sizes_thumbnail_sizes_thumbnail_filename_idx: index(
      'media_sizes_thumbnail_sizes_thumbnail_filename_idx',
    ).on(columns.sizes_thumbnail_filename),
  }),
)

export const natural_diamonds = pgTable(
  'natural_diamonds',
  {
    id: serial('id').primaryKey(),
    diamond_id: varchar('diamond_id').notNull().primaryKey(),
    stock_id: varchar('stock_id').notNull(),
    report_no: varchar('report_no').notNull(),
    shape: varchar('shape'),
    full_shape: varchar('full_shape'),
    carats: numeric('carats'),
    col: varchar('col'),
    clar: varchar('clar'),
    cut: varchar('cut'),
    pol: varchar('pol'),
    symm: varchar('symm'),
    flo: varchar('flo'),
    flo_col: varchar('flo_col'),
    eye_clean: varchar('eye_clean'),
    brown: varchar('brown'),
    green: varchar('green'),
    milky: varchar('milky'),
    fancy_color: varchar('fancy_color'),
    fancy_overtone: varchar('fancy_overtone'),
    fancy_intensity: varchar('fancy_intensity'),
    color_shade: varchar('color_shade'),
    length: numeric('length'),
    width: numeric('width'),
    height: numeric('height'),
    depth: numeric('depth'),
    table: numeric('table'),
    culet: varchar('culet'),
    girdle: varchar('girdle'),
    star_length: numeric('star_length'),
    lower_girdle: numeric('lower_girdle'),
    crown_height: numeric('crown_height'),
    crown_angle: numeric('crown_angle'),
    pav_angle: numeric('pav_angle'),
    pav_height: numeric('pav_height'),
    pav_depth: numeric('pav_depth'),
    discount: varchar('discount'),
    price: numeric('price'),
    markup_price: numeric('markup_price'),
    markup_currency: varchar('markup_currency'),
    price_per_carat: numeric('price_per_carat'),
    delivered_price: numeric('delivered_price'),
    lab: varchar('lab'),
    pdf: varchar('pdf'),
    video: varchar('video'),
    image: varchar('image'),
    videos_image_uri: varchar('videos_image_uri'),
    videos_frame: numeric('videos_frame'),
    blue: varchar('blue'),
    gray: varchar('gray'),
    min_delivery_days: numeric('min_delivery_days'),
    max_delivery_days: numeric('max_delivery_days'),
    country: varchar('country'),
    mine_of_origin: varchar('mine_of_origin'),
    canada_mark_eligible: boolean('canada_mark_eligible').default(false),
    labgrown_type: varchar('labgrown_type'),
    lg: varchar('lg'),
    is_returnable: boolean('is_returnable').default(false),
    is_diavaia: boolean('is_diavaia').default(false),
    published: boolean('published').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    natural_diamonds_diamond_id_idx: uniqueIndex('natural_diamonds_diamond_id_idx').on(
      columns.diamond_id,
    ),
    natural_diamonds_updated_at_idx: index('natural_diamonds_updated_at_idx').on(columns.updatedAt),
    natural_diamonds_created_at_idx: index('natural_diamonds_created_at_idx').on(columns.createdAt),
    diamond_id_idx: index('diamond_id_idx').on(columns.diamond_id),
    markup_price_idx: index('markup_price_idx').on(columns.markup_price),
    carats_idx: index('carats_idx').on(columns.carats),
    col_idx: index('col_idx').on(columns.col),
    clar_idx: index('clar_idx').on(columns.clar),
    cut_idx: index('cut_idx').on(columns.cut),
  }),
)

export const natural_colored_diamonds = pgTable(
  'natural_colored_diamonds',
  {
    id: serial('id').primaryKey(),
    diamond_id: varchar('diamond_id').notNull().primaryKey(),
    stock_id: varchar('stock_id').notNull(),
    report_no: varchar('report_no').notNull(),
    shape: varchar('shape'),
    full_shape: varchar('full_shape'),
    carats: numeric('carats'),
    col: varchar('col'),
    clar: varchar('clar'),
    cut: varchar('cut'),
    pol: varchar('pol'),
    symm: varchar('symm'),
    flo: varchar('flo'),
    flo_col: varchar('flo_col'),
    eye_clean: varchar('eye_clean'),
    brown: varchar('brown'),
    green: varchar('green'),
    milky: varchar('milky'),
    fancy_color: varchar('fancy_color'),
    fancy_overtone: varchar('fancy_overtone'),
    fancy_intensity: varchar('fancy_intensity'),
    color_shade: varchar('color_shade'),
    length: numeric('length'),
    width: numeric('width'),
    height: numeric('height'),
    depth: numeric('depth'),
    table: numeric('table'),
    culet: varchar('culet'),
    girdle: varchar('girdle'),
    star_length: numeric('star_length'),
    lower_girdle: numeric('lower_girdle'),
    crown_height: numeric('crown_height'),
    crown_angle: numeric('crown_angle'),
    pav_angle: numeric('pav_angle'),
    pav_height: numeric('pav_height'),
    pav_depth: numeric('pav_depth'),
    discount: varchar('discount'),
    price: numeric('price'),
    markup_price: numeric('markup_price'),
    markup_currency: varchar('markup_currency'),
    price_per_carat: numeric('price_per_carat'),
    delivered_price: numeric('delivered_price'),
    lab: varchar('lab'),
    pdf: varchar('pdf'),
    video: varchar('video'),
    image: varchar('image'),
    videos_image_uri: varchar('videos_image_uri'),
    videos_frame: numeric('videos_frame'),
    blue: varchar('blue'),
    gray: varchar('gray'),
    min_delivery_days: numeric('min_delivery_days'),
    max_delivery_days: numeric('max_delivery_days'),
    country: varchar('country'),
    mine_of_origin: varchar('mine_of_origin'),
    canada_mark_eligible: boolean('canada_mark_eligible').default(false),
    labgrown_type: varchar('labgrown_type'),
    lg: varchar('lg'),
    is_returnable: boolean('is_returnable').default(false),
    is_diavaia: boolean('is_diavaia').default(false),
    published: boolean('published').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    natural_colored_diamonds_diamond_id_idx: uniqueIndex(
      'natural_colored_diamonds_diamond_id_idx',
    ).on(columns.diamond_id),
    natural_colored_diamonds_updated_at_idx: index('natural_colored_diamonds_updated_at_idx').on(
      columns.updatedAt,
    ),
    natural_colored_diamonds_created_at_idx: index('natural_colored_diamonds_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const laboratory_grown_diamonds = pgTable(
  'laboratory_grown_diamonds',
  {
    id: serial('id').primaryKey(),
    diamond_id: varchar('diamond_id').notNull().primaryKey(),
    stock_id: varchar('stock_id').notNull(),
    report_no: varchar('report_no').notNull(),
    shape: varchar('shape'),
    full_shape: varchar('full_shape'),
    carats: numeric('carats'),
    col: varchar('col'),
    clar: varchar('clar'),
    cut: varchar('cut'),
    pol: varchar('pol'),
    symm: varchar('symm'),
    flo: varchar('flo'),
    flo_col: varchar('flo_col'),
    eye_clean: varchar('eye_clean'),
    brown: varchar('brown'),
    green: varchar('green'),
    milky: varchar('milky'),
    fancy_color: varchar('fancy_color'),
    fancy_overtone: varchar('fancy_overtone'),
    fancy_intensity: varchar('fancy_intensity'),
    color_shade: varchar('color_shade'),
    length: numeric('length'),
    width: numeric('width'),
    height: numeric('height'),
    depth: numeric('depth'),
    table: numeric('table'),
    culet: varchar('culet'),
    girdle: varchar('girdle'),
    star_length: numeric('star_length'),
    lower_girdle: numeric('lower_girdle'),
    crown_height: numeric('crown_height'),
    crown_angle: numeric('crown_angle'),
    pav_angle: numeric('pav_angle'),
    pav_height: numeric('pav_height'),
    pav_depth: numeric('pav_depth'),
    discount: varchar('discount'),
    price: numeric('price'),
    markup_price: numeric('markup_price'),
    markup_currency: varchar('markup_currency'),
    price_per_carat: numeric('price_per_carat'),
    delivered_price: numeric('delivered_price'),
    lab: varchar('lab'),
    pdf: varchar('pdf'),
    video: varchar('video'),
    image: varchar('image'),
    videos_image_uri: varchar('videos_image_uri'),
    videos_frame: numeric('videos_frame'),
    blue: varchar('blue'),
    gray: varchar('gray'),
    min_delivery_days: numeric('min_delivery_days'),
    max_delivery_days: numeric('max_delivery_days'),
    country: varchar('country'),
    mine_of_origin: varchar('mine_of_origin'),
    canada_mark_eligible: boolean('canada_mark_eligible').default(false),
    labgrown_type: varchar('labgrown_type'),
    lg: varchar('lg'),
    is_returnable: boolean('is_returnable').default(false),
    is_diavaia: boolean('is_diavaia').default(false),
    published: boolean('published').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    laboratory_grown_diamonds_diamond_id_idx: uniqueIndex(
      'laboratory_grown_diamonds_diamond_id_idx',
    ).on(columns.diamond_id),
    laboratory_grown_diamonds_updated_at_idx: index('laboratory_grown_diamonds_updated_at_idx').on(
      columns.updatedAt,
    ),
    laboratory_grown_diamonds_created_at_idx: index('laboratory_grown_diamonds_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const laboratory_grown_colored_diamonds = pgTable(
  'laboratory_grown_colored_diamonds',
  {
    id: serial('id').primaryKey(),
    diamond_id: varchar('diamond_id').notNull().primaryKey(),
    stock_id: varchar('stock_id').notNull(),
    report_no: varchar('report_no').notNull(),
    shape: varchar('shape'),
    full_shape: varchar('full_shape'),
    carats: numeric('carats'),
    col: varchar('col'),
    clar: varchar('clar'),
    cut: varchar('cut'),
    pol: varchar('pol'),
    symm: varchar('symm'),
    flo: varchar('flo'),
    flo_col: varchar('flo_col'),
    eye_clean: varchar('eye_clean'),
    brown: varchar('brown'),
    green: varchar('green'),
    milky: varchar('milky'),
    fancy_color: varchar('fancy_color'),
    fancy_overtone: varchar('fancy_overtone'),
    fancy_intensity: varchar('fancy_intensity'),
    color_shade: varchar('color_shade'),
    length: numeric('length'),
    width: numeric('width'),
    height: numeric('height'),
    depth: numeric('depth'),
    table: numeric('table'),
    culet: varchar('culet'),
    girdle: varchar('girdle'),
    star_length: numeric('star_length'),
    lower_girdle: numeric('lower_girdle'),
    crown_height: numeric('crown_height'),
    crown_angle: numeric('crown_angle'),
    pav_angle: numeric('pav_angle'),
    pav_height: numeric('pav_height'),
    pav_depth: numeric('pav_depth'),
    discount: varchar('discount'),
    price: numeric('price'),
    markup_price: numeric('markup_price'),
    markup_currency: varchar('markup_currency'),
    price_per_carat: numeric('price_per_carat'),
    delivered_price: numeric('delivered_price'),
    lab: varchar('lab'),
    pdf: varchar('pdf'),
    video: varchar('video'),
    image: varchar('image'),
    videos_image_uri: varchar('videos_image_uri'),
    videos_frame: numeric('videos_frame'),
    blue: varchar('blue'),
    gray: varchar('gray'),
    min_delivery_days: numeric('min_delivery_days'),
    max_delivery_days: numeric('max_delivery_days'),
    country: varchar('country'),
    mine_of_origin: varchar('mine_of_origin'),
    canada_mark_eligible: boolean('canada_mark_eligible').default(false),
    labgrown_type: varchar('labgrown_type'),
    lg: varchar('lg'),
    is_returnable: boolean('is_returnable').default(false),
    is_diavaia: boolean('is_diavaia').default(false),
    published: boolean('published').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    laboratory_grown_colored_diamonds_diamond_id_idx: uniqueIndex(
      'laboratory_grown_colored_diamonds_diamond_id_idx',
    ).on(columns.diamond_id),
    laboratory_grown_colored_diamonds_updated_at_idx: index(
      'laboratory_grown_colored_diamonds_updated_at_idx',
    ).on(columns.updatedAt),
    laboratory_grown_colored_diamonds_created_at_idx: index(
      'laboratory_grown_colored_diamonds_created_at_idx',
    ).on(columns.createdAt),
  }),
)

export const jewelleries = pgTable(
  'jewelleries',
  {
    id: serial('id').primaryKey(),
    ref_diavaia: varchar('ref_diavaia').notNull(),
    product_type: enum_jewelleries_product_type('product_type'),
    metal_type: varchar('metal_type'),
    total_stones: numeric('total_stones'),
    stone_type: varchar('stone_type'),
    stone_colour: varchar('stone_colour'),
    stone_clarity: varchar('stone_clarity'),
    weight: numeric('weight'),
    ctw: numeric('ctw'),
    retail_price: varchar('retail_price'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    jewelleries_ref_diavaia_idx: uniqueIndex('jewelleries_ref_diavaia_idx').on(columns.ref_diavaia),
    jewelleries_updated_at_idx: index('jewelleries_updated_at_idx').on(columns.updatedAt),
    jewelleries_created_at_idx: index('jewelleries_created_at_idx').on(columns.createdAt),
  }),
)

export const product_categories = pgTable(
  'product_categories',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    product_categories_updated_at_idx: index('product_categories_updated_at_idx').on(
      columns.updatedAt,
    ),
    product_categories_created_at_idx: index('product_categories_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const colors = pgTable(
  'colors',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    colors_updated_at_idx: index('colors_updated_at_idx').on(columns.updatedAt),
    colors_created_at_idx: index('colors_created_at_idx').on(columns.createdAt),
  }),
)

export const cuts = pgTable(
  'cuts',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    cuts_updated_at_idx: index('cuts_updated_at_idx').on(columns.updatedAt),
    cuts_created_at_idx: index('cuts_created_at_idx').on(columns.createdAt),
  }),
)

export const clarities = pgTable(
  'clarities',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    clarities_updated_at_idx: index('clarities_updated_at_idx').on(columns.updatedAt),
    clarities_created_at_idx: index('clarities_created_at_idx').on(columns.createdAt),
  }),
)

export const certifications = pgTable(
  'certifications',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    certifications_updated_at_idx: index('certifications_updated_at_idx').on(columns.updatedAt),
    certifications_created_at_idx: index('certifications_created_at_idx').on(columns.createdAt),
  }),
)

export const symmetries = pgTable(
  'symmetries',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    symmetries_updated_at_idx: index('symmetries_updated_at_idx').on(columns.updatedAt),
    symmetries_created_at_idx: index('symmetries_created_at_idx').on(columns.createdAt),
  }),
)

export const polishes = pgTable(
  'polishes',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    polishes_updated_at_idx: index('polishes_updated_at_idx').on(columns.updatedAt),
    polishes_created_at_idx: index('polishes_created_at_idx').on(columns.createdAt),
  }),
)

export const fluorescences = pgTable(
  'fluorescences',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    fluorescences_updated_at_idx: index('fluorescences_updated_at_idx').on(columns.updatedAt),
    fluorescences_created_at_idx: index('fluorescences_created_at_idx').on(columns.createdAt),
  }),
)

export const girdle_thicknesses = pgTable(
  'girdle_thicknesses',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    girdle_thicknesses_updated_at_idx: index('girdle_thicknesses_updated_at_idx').on(
      columns.updatedAt,
    ),
    girdle_thicknesses_created_at_idx: index('girdle_thicknesses_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
    mediaID: integer('media_id'),
    'natural-diamondsID': integer('natural_diamonds_id'),
    'natural-colored-diamondsID': integer('natural_colored_diamonds_id'),
    'laboratory-grown-diamondsID': integer('laboratory_grown_diamonds_id'),
    'laboratory-grown-colored-diamondsID': integer('laboratory_grown_colored_diamonds_id'),
    JewelleriesID: integer('jewelleries_id'),
    'product-categoriesID': integer('product_categories_id'),
    colorsID: integer('colors_id'),
    cutsID: integer('cuts_id'),
    claritiesID: integer('clarities_id'),
    certificationsID: integer('certifications_id'),
    symmetriesID: integer('symmetries_id'),
    polishesID: integer('polishes_id'),
    fluorescencesID: integer('fluorescences_id'),
    'girdle-thicknessesID': integer('girdle_thicknesses_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_natural_diamonds_id_idx: index(
      'payload_locked_documents_rels_natural_diamonds_id_idx',
    ).on(columns['natural-diamondsID']),
    payload_locked_documents_rels_natural_colored_diamonds_id_idx: index(
      'payload_locked_documents_rels_natural_colored_diamonds_id_idx',
    ).on(columns['natural-colored-diamondsID']),
    payload_locked_documents_rels_laboratory_grown_diamonds_id_idx: index(
      'payload_locked_documents_rels_laboratory_grown_diamonds_id_idx',
    ).on(columns['laboratory-grown-diamondsID']),
    payload_locked_documents_rels_laboratory_grown_colored_diamonds_id_idx: index(
      'payload_locked_documents_rels_laboratory_grown_colored_diamonds_id_idx',
    ).on(columns['laboratory-grown-colored-diamondsID']),
    payload_locked_documents_rels_jewelleries_id_idx: index(
      'payload_locked_documents_rels_jewelleries_id_idx',
    ).on(columns.JewelleriesID),
    payload_locked_documents_rels_product_categories_id_idx: index(
      'payload_locked_documents_rels_product_categories_id_idx',
    ).on(columns['product-categoriesID']),
    payload_locked_documents_rels_colors_id_idx: index(
      'payload_locked_documents_rels_colors_id_idx',
    ).on(columns.colorsID),
    payload_locked_documents_rels_cuts_id_idx: index(
      'payload_locked_documents_rels_cuts_id_idx',
    ).on(columns.cutsID),
    payload_locked_documents_rels_clarities_id_idx: index(
      'payload_locked_documents_rels_clarities_id_idx',
    ).on(columns.claritiesID),
    payload_locked_documents_rels_certifications_id_idx: index(
      'payload_locked_documents_rels_certifications_id_idx',
    ).on(columns.certificationsID),
    payload_locked_documents_rels_symmetries_id_idx: index(
      'payload_locked_documents_rels_symmetries_id_idx',
    ).on(columns.symmetriesID),
    payload_locked_documents_rels_polishes_id_idx: index(
      'payload_locked_documents_rels_polishes_id_idx',
    ).on(columns.polishesID),
    payload_locked_documents_rels_fluorescences_id_idx: index(
      'payload_locked_documents_rels_fluorescences_id_idx',
    ).on(columns.fluorescencesID),
    payload_locked_documents_rels_girdle_thicknesses_id_idx: index(
      'payload_locked_documents_rels_girdle_thicknesses_id_idx',
    ).on(columns['girdle-thicknessesID']),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    'natural-diamondsIdFk': foreignKey({
      columns: [columns['natural-diamondsID']],
      foreignColumns: [natural_diamonds.id],
      name: 'payload_locked_documents_rels_natural_diamonds_fk',
    }).onDelete('cascade'),
    'natural-colored-diamondsIdFk': foreignKey({
      columns: [columns['natural-colored-diamondsID']],
      foreignColumns: [natural_colored_diamonds.id],
      name: 'payload_locked_documents_rels_natural_colored_diamonds_fk',
    }).onDelete('cascade'),
    'laboratory-grown-diamondsIdFk': foreignKey({
      columns: [columns['laboratory-grown-diamondsID']],
      foreignColumns: [laboratory_grown_diamonds.id],
      name: 'payload_locked_documents_rels_laboratory_grown_diamonds_fk',
    }).onDelete('cascade'),
    'laboratory-grown-colored-diamondsIdFk': foreignKey({
      columns: [columns['laboratory-grown-colored-diamondsID']],
      foreignColumns: [laboratory_grown_colored_diamonds.id],
      name: 'payload_locked_documents_rels_laboratory_grown_colored_diamonds_fk',
    }).onDelete('cascade'),
    JewelleriesIdFk: foreignKey({
      columns: [columns['JewelleriesID']],
      foreignColumns: [jewelleries.id],
      name: 'payload_locked_documents_rels_jewelleries_fk',
    }).onDelete('cascade'),
    'product-categoriesIdFk': foreignKey({
      columns: [columns['product-categoriesID']],
      foreignColumns: [product_categories.id],
      name: 'payload_locked_documents_rels_product_categories_fk',
    }).onDelete('cascade'),
    colorsIdFk: foreignKey({
      columns: [columns['colorsID']],
      foreignColumns: [colors.id],
      name: 'payload_locked_documents_rels_colors_fk',
    }).onDelete('cascade'),
    cutsIdFk: foreignKey({
      columns: [columns['cutsID']],
      foreignColumns: [cuts.id],
      name: 'payload_locked_documents_rels_cuts_fk',
    }).onDelete('cascade'),
    claritiesIdFk: foreignKey({
      columns: [columns['claritiesID']],
      foreignColumns: [clarities.id],
      name: 'payload_locked_documents_rels_clarities_fk',
    }).onDelete('cascade'),
    certificationsIdFk: foreignKey({
      columns: [columns['certificationsID']],
      foreignColumns: [certifications.id],
      name: 'payload_locked_documents_rels_certifications_fk',
    }).onDelete('cascade'),
    symmetriesIdFk: foreignKey({
      columns: [columns['symmetriesID']],
      foreignColumns: [symmetries.id],
      name: 'payload_locked_documents_rels_symmetries_fk',
    }).onDelete('cascade'),
    polishesIdFk: foreignKey({
      columns: [columns['polishesID']],
      foreignColumns: [polishes.id],
      name: 'payload_locked_documents_rels_polishes_fk',
    }).onDelete('cascade'),
    fluorescencesIdFk: foreignKey({
      columns: [columns['fluorescencesID']],
      foreignColumns: [fluorescences.id],
      name: 'payload_locked_documents_rels_fluorescences_fk',
    }).onDelete('cascade'),
    'girdle-thicknessesIdFk': foreignKey({
      columns: [columns['girdle-thicknessesID']],
      foreignColumns: [girdle_thicknesses.id],
      name: 'payload_locked_documents_rels_girdle_thicknesses_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const relations_users = relations(users, () => ({}))
export const relations_media = relations(media, () => ({}))
export const relations_natural_diamonds = relations(natural_diamonds, () => ({}))
export const relations_natural_colored_diamonds = relations(natural_colored_diamonds, () => ({}))
export const relations_laboratory_grown_diamonds = relations(laboratory_grown_diamonds, () => ({}))
export const relations_laboratory_grown_colored_diamonds = relations(
  laboratory_grown_colored_diamonds,
  () => ({}),
)
export const relations_jewelleries = relations(jewelleries, () => ({}))
export const relations_product_categories = relations(product_categories, () => ({}))
export const relations_colors = relations(colors, () => ({}))
export const relations_cuts = relations(cuts, () => ({}))
export const relations_clarities = relations(clarities, () => ({}))
export const relations_certifications = relations(certifications, () => ({}))
export const relations_symmetries = relations(symmetries, () => ({}))
export const relations_polishes = relations(polishes, () => ({}))
export const relations_fluorescences = relations(fluorescences, () => ({}))
export const relations_girdle_thicknesses = relations(girdle_thicknesses, () => ({}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    'natural-diamondsID': one(natural_diamonds, {
      fields: [payload_locked_documents_rels['natural-diamondsID']],
      references: [natural_diamonds.id],
      relationName: 'natural-diamonds',
    }),
    'natural-colored-diamondsID': one(natural_colored_diamonds, {
      fields: [payload_locked_documents_rels['natural-colored-diamondsID']],
      references: [natural_colored_diamonds.id],
      relationName: 'natural-colored-diamonds',
    }),
    'laboratory-grown-diamondsID': one(laboratory_grown_diamonds, {
      fields: [payload_locked_documents_rels['laboratory-grown-diamondsID']],
      references: [laboratory_grown_diamonds.id],
      relationName: 'laboratory-grown-diamonds',
    }),
    'laboratory-grown-colored-diamondsID': one(laboratory_grown_colored_diamonds, {
      fields: [payload_locked_documents_rels['laboratory-grown-colored-diamondsID']],
      references: [laboratory_grown_colored_diamonds.id],
      relationName: 'laboratory-grown-colored-diamonds',
    }),
    JewelleriesID: one(jewelleries, {
      fields: [payload_locked_documents_rels.JewelleriesID],
      references: [jewelleries.id],
      relationName: 'Jewelleries',
    }),
    'product-categoriesID': one(product_categories, {
      fields: [payload_locked_documents_rels['product-categoriesID']],
      references: [product_categories.id],
      relationName: 'product-categories',
    }),
    colorsID: one(colors, {
      fields: [payload_locked_documents_rels.colorsID],
      references: [colors.id],
      relationName: 'colors',
    }),
    cutsID: one(cuts, {
      fields: [payload_locked_documents_rels.cutsID],
      references: [cuts.id],
      relationName: 'cuts',
    }),
    claritiesID: one(clarities, {
      fields: [payload_locked_documents_rels.claritiesID],
      references: [clarities.id],
      relationName: 'clarities',
    }),
    certificationsID: one(certifications, {
      fields: [payload_locked_documents_rels.certificationsID],
      references: [certifications.id],
      relationName: 'certifications',
    }),
    symmetriesID: one(symmetries, {
      fields: [payload_locked_documents_rels.symmetriesID],
      references: [symmetries.id],
      relationName: 'symmetries',
    }),
    polishesID: one(polishes, {
      fields: [payload_locked_documents_rels.polishesID],
      references: [polishes.id],
      relationName: 'polishes',
    }),
    fluorescencesID: one(fluorescences, {
      fields: [payload_locked_documents_rels.fluorescencesID],
      references: [fluorescences.id],
      relationName: 'fluorescences',
    }),
    'girdle-thicknessesID': one(girdle_thicknesses, {
      fields: [payload_locked_documents_rels['girdle-thicknessesID']],
      references: [girdle_thicknesses.id],
      relationName: 'girdle-thicknesses',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))

type DatabaseSchema = {
  enum__locales: typeof enum__locales
  enum_users_civility: typeof enum_users_civility
  enum_users_country: typeof enum_users_country
  enum_users_role: typeof enum_users_role
  enum_jewelleries_product_type: typeof enum_jewelleries_product_type
  users: typeof users
  media: typeof media
  natural_diamonds: typeof natural_diamonds
  natural_colored_diamonds: typeof natural_colored_diamonds
  laboratory_grown_diamonds: typeof laboratory_grown_diamonds
  laboratory_grown_colored_diamonds: typeof laboratory_grown_colored_diamonds
  jewelleries: typeof jewelleries
  product_categories: typeof product_categories
  colors: typeof colors
  cuts: typeof cuts
  clarities: typeof clarities
  certifications: typeof certifications
  symmetries: typeof symmetries
  polishes: typeof polishes
  fluorescences: typeof fluorescences
  girdle_thicknesses: typeof girdle_thicknesses
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  relations_users: typeof relations_users
  relations_media: typeof relations_media
  relations_natural_diamonds: typeof relations_natural_diamonds
  relations_natural_colored_diamonds: typeof relations_natural_colored_diamonds
  relations_laboratory_grown_diamonds: typeof relations_laboratory_grown_diamonds
  relations_laboratory_grown_colored_diamonds: typeof relations_laboratory_grown_colored_diamonds
  relations_jewelleries: typeof relations_jewelleries
  relations_product_categories: typeof relations_product_categories
  relations_colors: typeof relations_colors
  relations_cuts: typeof relations_cuts
  relations_clarities: typeof relations_clarities
  relations_certifications: typeof relations_certifications
  relations_symmetries: typeof relations_symmetries
  relations_polishes: typeof relations_polishes
  relations_fluorescences: typeof relations_fluorescences
  relations_girdle_thicknesses: typeof relations_girdle_thicknesses
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
}

declare module '@payloadcms/db-postgres/types' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
